//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Script/Controllers/Input Actions/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerHuman"",
            ""id"": ""9f38a19a-9ff0-4aac-a089-a5cc8dedbed1"",
            ""actions"": [
                {
                    ""name"": ""JumpStart"",
                    ""type"": ""Button"",
                    ""id"": ""8c929325-7d25-4982-87f7-4ae38069caaa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpEnd"",
                    ""type"": ""Button"",
                    ""id"": ""b2e743f9-0fff-431c-9c01-fe3d4a186f2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ff7ca14b-56ab-4f4e-8504-e0e1062825fd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SprintStart"",
                    ""type"": ""Button"",
                    ""id"": ""da7f6a79-f0f4-4057-929d-52cd96456aad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SprintEnd"",
                    ""type"": ""Button"",
                    ""id"": ""b8b75f2a-faac-46fb-a04e-c6ce471cae70"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b2e71648-b59b-4992-9925-7f1817b93c72"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""JumpStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e639895-0787-424f-a5af-dae87bfe37b0"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JumpStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""99b641d1-205d-4270-9f84-e4441cd93094"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""359c9240-fa7e-4865-bb25-44426fefc444"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""95810c69-3b57-4ef4-9899-888ce61c9487"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""D-Pad"",
                    ""id"": ""e9c29c5b-975f-4564-b586-e75cdbc7f5d4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0fd37336-bb9b-489e-b760-5d516d230bcd"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""719f7720-e170-4b91-a1eb-0bcb01484656"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""fece3dfc-45c3-4c7c-8c49-c3641d4b4b39"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9772fba6-c3f7-4bbd-a869-e9ba31a3a280"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b4111f9c-cc90-4754-8f38-8b7f97611896"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5ac8db82-0be3-4d4a-bbcf-ee3c1d867490"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SprintStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd8c0862-8229-41c5-ac29-a307b2673593"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SprintEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9e8e4d3-57aa-4069-b2d4-f172c2b86fab"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""JumpEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a55362f4-8a29-472d-8fd6-518d8dd95264"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JumpEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerHuman
        m_PlayerHuman = asset.FindActionMap("PlayerHuman", throwIfNotFound: true);
        m_PlayerHuman_JumpStart = m_PlayerHuman.FindAction("JumpStart", throwIfNotFound: true);
        m_PlayerHuman_JumpEnd = m_PlayerHuman.FindAction("JumpEnd", throwIfNotFound: true);
        m_PlayerHuman_Move = m_PlayerHuman.FindAction("Move", throwIfNotFound: true);
        m_PlayerHuman_SprintStart = m_PlayerHuman.FindAction("SprintStart", throwIfNotFound: true);
        m_PlayerHuman_SprintEnd = m_PlayerHuman.FindAction("SprintEnd", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerHuman
    private readonly InputActionMap m_PlayerHuman;
    private IPlayerHumanActions m_PlayerHumanActionsCallbackInterface;
    private readonly InputAction m_PlayerHuman_JumpStart;
    private readonly InputAction m_PlayerHuman_JumpEnd;
    private readonly InputAction m_PlayerHuman_Move;
    private readonly InputAction m_PlayerHuman_SprintStart;
    private readonly InputAction m_PlayerHuman_SprintEnd;
    public struct PlayerHumanActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerHumanActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @JumpStart => m_Wrapper.m_PlayerHuman_JumpStart;
        public InputAction @JumpEnd => m_Wrapper.m_PlayerHuman_JumpEnd;
        public InputAction @Move => m_Wrapper.m_PlayerHuman_Move;
        public InputAction @SprintStart => m_Wrapper.m_PlayerHuman_SprintStart;
        public InputAction @SprintEnd => m_Wrapper.m_PlayerHuman_SprintEnd;
        public InputActionMap Get() { return m_Wrapper.m_PlayerHuman; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerHumanActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerHumanActions instance)
        {
            if (m_Wrapper.m_PlayerHumanActionsCallbackInterface != null)
            {
                @JumpStart.started -= m_Wrapper.m_PlayerHumanActionsCallbackInterface.OnJumpStart;
                @JumpStart.performed -= m_Wrapper.m_PlayerHumanActionsCallbackInterface.OnJumpStart;
                @JumpStart.canceled -= m_Wrapper.m_PlayerHumanActionsCallbackInterface.OnJumpStart;
                @JumpEnd.started -= m_Wrapper.m_PlayerHumanActionsCallbackInterface.OnJumpEnd;
                @JumpEnd.performed -= m_Wrapper.m_PlayerHumanActionsCallbackInterface.OnJumpEnd;
                @JumpEnd.canceled -= m_Wrapper.m_PlayerHumanActionsCallbackInterface.OnJumpEnd;
                @Move.started -= m_Wrapper.m_PlayerHumanActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerHumanActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerHumanActionsCallbackInterface.OnMove;
                @SprintStart.started -= m_Wrapper.m_PlayerHumanActionsCallbackInterface.OnSprintStart;
                @SprintStart.performed -= m_Wrapper.m_PlayerHumanActionsCallbackInterface.OnSprintStart;
                @SprintStart.canceled -= m_Wrapper.m_PlayerHumanActionsCallbackInterface.OnSprintStart;
                @SprintEnd.started -= m_Wrapper.m_PlayerHumanActionsCallbackInterface.OnSprintEnd;
                @SprintEnd.performed -= m_Wrapper.m_PlayerHumanActionsCallbackInterface.OnSprintEnd;
                @SprintEnd.canceled -= m_Wrapper.m_PlayerHumanActionsCallbackInterface.OnSprintEnd;
            }
            m_Wrapper.m_PlayerHumanActionsCallbackInterface = instance;
            if (instance != null)
            {
                @JumpStart.started += instance.OnJumpStart;
                @JumpStart.performed += instance.OnJumpStart;
                @JumpStart.canceled += instance.OnJumpStart;
                @JumpEnd.started += instance.OnJumpEnd;
                @JumpEnd.performed += instance.OnJumpEnd;
                @JumpEnd.canceled += instance.OnJumpEnd;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @SprintStart.started += instance.OnSprintStart;
                @SprintStart.performed += instance.OnSprintStart;
                @SprintStart.canceled += instance.OnSprintStart;
                @SprintEnd.started += instance.OnSprintEnd;
                @SprintEnd.performed += instance.OnSprintEnd;
                @SprintEnd.canceled += instance.OnSprintEnd;
            }
        }
    }
    public PlayerHumanActions @PlayerHuman => new PlayerHumanActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerHumanActions
    {
        void OnJumpStart(InputAction.CallbackContext context);
        void OnJumpEnd(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnSprintStart(InputAction.CallbackContext context);
        void OnSprintEnd(InputAction.CallbackContext context);
    }
}
